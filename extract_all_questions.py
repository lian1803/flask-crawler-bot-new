#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import pandas as pd
import random
from typing import List, Dict, Set

class QuestionExtractor:
    def __init__(self):
        self.all_questions = set()
        self.question_variations = {}
        
        # 오타 패턴 정의
        self.typo_patterns = {
            '개학': ['개학', '개학', '개학', '개학', '개학', '개학', '개학', '개학'],
            '급식': ['급식', '급식', '급식', '급식', '급식', '급식', '급식'],
            '방과후': ['방과후', '방과후', '방과후', '방과후', '방과후', '방과후'],
            '전학': ['전학', '전학', '전학', '전학', '전학', '전학'],
            '상담': ['상담', '상담', '상담', '상담', '상담', '상담'],
            '결석': ['결석', '결석', '결석', '결석', '결석', '결석'],
            '교실': ['교실', '교실', '교실', '교실', '교실', '교실'],
            '등하교': ['등하교', '등하교', '등하교', '등하교', '등하교'],
            '학교': ['학교', '학교', '학교', '학교', '학교', '학교'],
            '전화번호': ['전화번호', '전화번호', '전화번호', '전화번호', '전화번호'],
            '연락처': ['연락처', '연락처', '연락처', '연락처', '연락처'],
            '안녕': ['안녕', '안녕', '안녕', '안녕', '안녕', '안녕'],
            '도움': ['도움', '도움', '도움', '도움', '도움', '도움'],
            '감사': ['감사', '감사', '감사', '감사', '감사', '감사'],
            '고마워': ['고마워', '고마워', '고마워', '고마워', '고마워'],
            '뭐해': ['뭐해', '뭐해', '뭐해', '뭐해', '뭐해', '뭐해'],
            '잘 있어': ['잘 있어', '잘 있어', '잘 있어', '잘 있어', '잘 있어']
        }
        
        # 이탈자 패턴 (조사, 어미 변화)
        self.particle_variations = {
            '은': ['은', '는', '이', '가'],
            '을': ['을', '를', '이', '가'],
            '이': ['이', '가', '은', '는'],
            '가': ['가', '이', '은', '는'],
            '에': ['에', '에서', '로', '으로'],
            '에서': ['에서', '에', '로', '으로'],
            '로': ['로', '으로', '에', '에서'],
            '으로': ['으로', '로', '에', '에서'],
            '와': ['와', '과', '하고', '랑'],
            '과': ['과', '와', '하고', '랑'],
            '하고': ['하고', '와', '과', '랑'],
            '랑': ['랑', '와', '과', '하고']
        }
        
        # 어미 변화 패턴
        self.ending_variations = {
            '하나요': ['하나요', '해요', '해', '하세요', '하시나요'],
            '해요': ['해요', '해', '하나요', '하세요', '하시나요'],
            '해': ['해', '해요', '하나요', '하세요', '하시나요'],
            '하세요': ['하세요', '해요', '해', '하나요', '하시나요'],
            '하시나요': ['하시나요', '하나요', '해요', '해', '하세요'],
            '야': ['야', '이야', '야요', '이야요'],
            '이야': ['이야', '야', '야요', '이야요'],
            '야요': ['야요', '야', '이야', '이야요'],
            '이야요': ['이야요', '야', '이야', '야요']
        }
    
    def load_qa_data(self):
        """QA 데이터 로드"""
        try:
            with open('school_dataset.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"QA 데이터 로드 오류: {e}")
            return []
    
    def generate_typo_variations(self, text: str) -> List[str]:
        """오타 변형 생성"""
        variations = [text]
        
        # 일반적인 오타 패턴 적용
        typo_rules = [
            ('ㅂ', 'ㅃ'), ('ㅈ', 'ㅉ'), ('ㄷ', 'ㄸ'), ('ㄱ', 'ㄲ'), ('ㅅ', 'ㅆ'),
            ('ㅐ', 'ㅒ'), ('ㅔ', 'ㅖ'), ('ㅗ', 'ㅜ'), ('ㅓ', 'ㅏ'),
            ('ㅇ', ''), ('ㄴ', 'ㄹ'), ('ㄹ', 'ㄴ'), ('ㅁ', 'ㅂ'), ('ㅂ', 'ㅁ')
        ]
        
        for original, typo in typo_rules:
            if original in text:
                variations.append(text.replace(original, typo))
        
        # 자음/모음 분리 오타
        for char in text:
            if char in 'ㄱㄴㄷㄹㅁㅂㅅㅇㅈㅊㅋㅌㅍㅎ':
                # 자음 분리 오타 (예: ㄱ -> ㄱㅏ)
                variations.append(text.replace(char, char + 'ㅏ'))
        
        return list(set(variations))
    
    def generate_particle_variations(self, text: str) -> List[str]:
        """조사 변형 생성"""
        variations = [text]
        
        for particle, alternatives in self.particle_variations.items():
            if particle in text:
                for alt in alternatives:
                    if alt != particle:
                        variations.append(text.replace(particle, alt))
        
        return list(set(variations))
    
    def generate_ending_variations(self, text: str) -> List[str]:
        """어미 변형 생성"""
        variations = [text]
        
        for ending, alternatives in self.ending_variations.items():
            if text.endswith(ending):
                for alt in alternatives:
                    if alt != ending:
                        new_text = text[:-len(ending)] + alt
                        variations.append(new_text)
        
        return list(set(variations))
    
    def generate_word_order_variations(self, text: str) -> List[str]:
        """단어 순서 변형 생성"""
        variations = [text]
        words = text.split()
        
        if len(words) > 1:
            # 단어 순서 바꾸기
            for i in range(len(words) - 1):
                new_words = words.copy()
                new_words[i], new_words[i+1] = new_words[i+1], new_words[i]
                variations.append(' '.join(new_words))
        
        return list(set(variations))
    
    def generate_spacing_variations(self, text: str) -> List[str]:
        """띄어쓰기 변형 생성"""
        variations = [text]
        
        # 띄어쓰기 추가
        for i in range(len(text) - 1):
            if text[i] != ' ' and text[i+1] != ' ':
                new_text = text[:i+1] + ' ' + text[i+1:]
                variations.append(new_text)
        
        # 띄어쓰기 제거
        variations.append(text.replace(' ', ''))
        
        return list(set(variations))
    
    def generate_all_variations(self, original_question: str) -> List[str]:
        """모든 변형 생성"""
        all_variations = [original_question]
        
        # 오타 변형
        all_variations.extend(self.generate_typo_variations(original_question))
        
        # 조사 변형
        all_variations.extend(self.generate_particle_variations(original_question))
        
        # 어미 변형
        all_variations.extend(self.generate_ending_variations(original_question))
        
        # 단어 순서 변형
        all_variations.extend(self.generate_word_order_variations(original_question))
        
        # 띄어쓰기 변형
        all_variations.extend(self.generate_spacing_variations(original_question))
        
        return list(set(all_variations))
    
    def extract_all_questions(self):
        """모든 질문 추출 및 변형 생성"""
        print("🔍 모든 질문 추출 시작...")
        
        # 1. QA 데이터에서 질문 추출
        qa_data = self.load_qa_data()
        for qa in qa_data:
            original_question = qa['question']
            self.all_questions.add(original_question)
            
            # 변형 생성
            variations = self.generate_all_variations(original_question)
            self.question_variations[original_question] = {
                'original': original_question,
                'variations': variations,
                'answer': qa['answer'],
                'category': qa.get('category', '기타')
            }
        
        # 2. 추가 질문 패턴 생성
        additional_patterns = [
            # 개학 관련
            "개학 언제야", "개학은 언제하나요?", "개학일", "개학 날짜", "개학 시기",
            "개학이 언제야", "개학이 언제인가요?", "개학일정", "개학 스케줄",
            "개학은 몇월 몇일", "개학 날짜 알려줘", "개학이 언제예요",
            "개학은 언제부터", "개학 시작일", "개학은 언제부터인가요",
            
            # 학교 전화번호 관련
            "학교 전화번호", "학교 번호", "학교 연락처", "학교에 전화하고 싶어",
            "학교로 전화하려면", "학교 전화번호 알려줘", "학교 번호 알려줘",
            "학교 연락처 알려줘", "학교에 문의하고 싶어", "학교로 연락하고 싶어",
            "학교 전화번호가 뭐야", "학교 번호가 뭐야", "학교 연락처가 뭐야",
            
            # 급식 관련 (맥락적 표현 포함)
            "오늘 급식", "오늘 식단", "오늘 점심", "오늘 메뉴", "오늘 밥",
            "내일 급식", "내일 식단", "내일 점심", "내일 메뉴", "내일 밥",
            "어제 급식", "어제 식단", "어제 점심", "어제 메뉴", "어제 밥",
            "모레 급식", "모레 식단", "모레 점심", "모레 메뉴", "모레 밥",
            "급식 메뉴", "식단표", "급식표", "점심 메뉴", "중식 메뉴",
            "5월 20일 급식", "5/20 급식", "5월 20일 식단", "5/20 식단",
            
            # 맥락적 급식 표현
            "오늘 밥 뭐냐", "오늘 밥 뭐야", "오늘 밥 뭐예요", "오늘 밥 뭐임",
            "내일 밥 뭐냐", "내일 밥 뭐야", "내일 밥 뭐예요", "내일 밥 뭐임",
            "어제 밥 뭐였냐", "어제 밥 뭐였어", "어제 밥 뭐였어요",
            "모레 밥 뭐냐", "모레 밥 뭐야", "모레 밥 뭐예요",
            "오늘 점심 뭐냐", "오늘 점심 뭐야", "오늘 점심 뭐예요",
            "내일 점심 뭐냐", "내일 점심 뭐야", "내일 점심 뭐예요",
            "어제 점심 뭐였냐", "어제 점심 뭐였어", "어제 점심 뭐였어요",
            "오늘 메뉴 뭐냐", "오늘 메뉴 뭐야", "오늘 메뉴 뭐예요",
            "내일 메뉴 뭐냐", "내일 메뉴 뭐야", "내일 메뉴 뭐예요",
            "오늘 뭐 먹어", "오늘 뭐 먹어요", "오늘 뭐 먹냐",
            "내일 뭐 먹어", "내일 뭐 먹어요", "내일 뭐 먹냐",
            "어제 뭐 먹었어", "어제 뭐 먹었어요", "어제 뭐 먹었냐",
            "오늘 식사 뭐냐", "오늘 식사 뭐야", "오늘 식사 뭐예요",
            "내일 식사 뭐냐", "내일 식사 뭐야", "내일 식사 뭐예요",
            "오늘 중식 뭐냐", "오늘 중식 뭐야", "오늘 중식 뭐예요",
            "내일 중식 뭐냐", "내일 중식 뭐야", "내일 중식 뭐예요",
            "오늘 뭐 나와", "오늘 뭐 나와요", "오늘 뭐 나오냐",
            "내일 뭐 나와", "내일 뭐 나와요", "내일 뭐 나오냐",
            "오늘 밥상 뭐냐", "오늘 밥상 뭐야", "오늘 밥상 뭐예요",
            "내일 밥상 뭐냐", "내일 밥상 뭐야", "내일 밥상 뭐예요",
            
            # 방과후 관련
            "방과후", "방과후 수업", "방과후 프로그램", "방과후 활동",
            "방과후 시간", "방과후 일정", "방과후 스케줄", "방과후 신청",
            "방과후 등록", "방과후 수강", "방과후 교실", "방과후 강사",
            "방과후 비용", "방과후 요금", "방과후 학비", "방과후 수업료",
            
            # 맥락적 방과후 표현
            "방과후 언제 끝나", "방과후 언제 끝나요", "방과후 언제 끝냐",
            "방과후 몇시까지", "방과후 몇시까지야", "방과후 몇시까지예요",
            "방과후 언제야", "방과후 언제예요", "방과후 언제임",
            "방과후 뭐해", "방과후 뭐해요", "방과후 뭐하냐",
            "방과후 어디서", "방과후 어디서야", "방과후 어디서예요",
            "방과후 누구랑", "방과후 누구랑이야", "방과후 누구랑이예요",
            "방과후 얼마야", "방과후 얼마예요", "방과후 얼마냐",
            "방과후 신청했어", "방과후 신청했어요", "방과후 신청했냐",
            "방과후 등록했어", "방과후 등록했어요", "방과후 등록했냐",
            
            # 전학 관련
            "전학", "전학 절차", "전학 신청", "전학 방법", "전학 과정",
            "전입", "전입 신청", "전입 절차", "전입 방법", "전입 과정",
            "전출", "전출 신청", "전출 절차", "전출 방법", "전출 과정",
            "전학하려면", "전학하고 싶어", "전학 가려고 해", "전학 가려면",
            
            # 맥락적 전학 표현
            "전학 가려면 어떻게 해", "전학 가려면 어떻게 해요", "전학 가려면 어떻게 하냐",
            "전학하려면 뭐가 필요해", "전학하려면 뭐가 필요해요", "전학하려면 뭐가 필요냐",
            "전학하려면 언제까지", "전학하려면 언제까지야", "전학하려면 언제까지예요",
            "전학하려면 어디로", "전학하려면 어디로야", "전학하려면 어디로예요",
            "전학하려면 누구한테", "전학하려면 누구한테야", "전학하려면 누구한테예요",
            "전학하려면 얼마나 걸려", "전학하려면 얼마나 걸려요", "전학하려면 얼마나 걸리냐",
            "전학하려면 서류 뭐가 필요해", "전학하려면 서류 뭐가 필요해요", "전학하려면 서류 뭐가 필요냐",
            "전학하려면 신청서 어디서", "전학하려면 신청서 어디서야", "전학하려면 신청서 어디서예요",
            
            # 상담 관련
            "상담", "담임 상담", "선생님 상담", "교사 상담", "상담 신청",
            "상담 예약", "상담 일정", "상담 시간", "상담 방법", "상담 절차",
            "담임과 상담", "선생님과 상담", "교사와 상담", "상담하고 싶어",
            "상담 받고 싶어", "상담 예약하고 싶어", "상담 일정 잡고 싶어",
            
            # 맥락적 상담 표현
            "담임이랑 얘기하고 싶어", "담임이랑 얘기하고 싶어요", "담임이랑 얘기하고 싶냐",
            "선생님이랑 얘기하고 싶어", "선생님이랑 얘기하고 싶어요", "선생님이랑 얘기하고 싶냐",
            "담임이랑 만나고 싶어", "담임이랑 만나고 싶어요", "담임이랑 만나고 싶냐",
            "선생님이랑 만나고 싶어", "선생님이랑 만나고 싶어요", "선생님이랑 만나고 싶냐",
            "담임이랑 상담하고 싶어", "담임이랑 상담하고 싶어요", "담임이랑 상담하고 싶냐",
            "선생님이랑 상담하고 싶어", "선생님이랑 상담하고 싶어요", "선생님이랑 상담하고 싶냐",
            "담임이랑 얘기할 수 있어", "담임이랑 얘기할 수 있어요", "담임이랑 얘기할 수 있냐",
            "선생님이랑 얘기할 수 있어", "선생님이랑 얘기할 수 있어요", "선생님이랑 얘기할 수 있냐",
            "담임이랑 언제 만나", "담임이랑 언제 만나요", "담임이랑 언제 만나냐",
            "선생님이랑 언제 만나", "선생님이랑 언제 만나요", "선생님이랑 언제 만나냐",
            "담임이랑 어디서 만나", "담임이랑 어디서 만나요", "담임이랑 어디서 만나냐",
            "선생님이랑 어디서 만나", "선생님이랑 어디서 만나요", "선생님이랑 어디서 만나냐",
            
            # 결석 관련
            "결석", "결석 신고", "결석 처리", "결석 방법", "결석 절차",
            "결석 사유", "결석 이유", "결석 신고서", "결석 처리 방법",
            "아프면", "병원 갈 것 같아", "몸이 안 좋아", "결석해야 해",
            "결석 신고하고 싶어", "결석 처리하고 싶어", "결석 신고서 제출",
            
            # 맥락적 결석 표현
            "아프면 어떻게 해", "아프면 어떻게 해요", "아프면 어떻게 하냐",
            "병원 갈 것 같으면 어떻게 해", "병원 갈 것 같으면 어떻게 해요", "병원 갈 것 같으면 어떻게 하냐",
            "몸이 안 좋으면 어떻게 해", "몸이 안 좋으면 어떻게 해요", "몸이 안 좋으면 어떻게 하냐",
            "결석하려면 어떻게 해", "결석하려면 어떻게 해요", "결석하려면 어떻게 하냐",
            "결석하려면 뭐가 필요해", "결석하려면 뭐가 필요해요", "결석하려면 뭐가 필요냐",
            "결석하려면 언제까지", "결석하려면 언제까지야", "결석하려면 언제까지예요",
            "결석하려면 누구한테", "결석하려면 누구한테야", "결석하려면 누구한테예요",
            "결석하려면 서류 뭐가 필요해", "결석하려면 서류 뭐가 필요해요", "결석하려면 서류 뭐가 필요냐",
            "결석하려면 신고서 어디서", "결석하려면 신고서 어디서야", "결석하려면 신고서 어디서예요",
            "결석하려면 증명서 뭐가 필요해", "결석하려면 증명서 뭐가 필요해요", "결석하려면 증명서 뭐가 필요냐",
            
            # 교실 배치 관련
            "교실", "교실 배치", "교실 위치", "교실 찾기", "교실 번호",
            "3학년 1반", "4학년 2반", "5학년 3반", "6학년 4반",
            "1학년 1반 어디야", "2학년 2반 어디야", "3학년 3반 어디야",
            "교실 배치도", "교실 위치도", "교실 찾는 방법", "교실 번호 알려줘",
            
            # 맥락적 교실 표현
            "3학년 1반 어디야", "3학년 1반 어디예요", "3학년 1반 어디임",
            "4학년 2반 어디야", "4학년 2반 어디예요", "4학년 2반 어디임",
            "5학년 3반 어디야", "5학년 3반 어디예요", "5학년 3반 어디임",
            "6학년 4반 어디야", "6학년 4반 어디예요", "6학년 4반 어디임",
            "1학년 1반 어디야", "1학년 1반 어디예요", "1학년 1반 어디임",
            "2학년 2반 어디야", "2학년 2반 어디예요", "2학년 2반 어디임",
            "교실 어디야", "교실 어디예요", "교실 어디임",
            "교실 찾고 있어", "교실 찾고 있어요", "교실 찾고 있냐",
            "교실 어디에 있어", "교실 어디에 있어요", "교실 어디에 있냐",
            "교실 어떻게 가", "교실 어떻게 가요", "교실 어떻게 가냐",
            "교실 몇층이야", "교실 몇층이예요", "교실 몇층임",
            "교실 몇호야", "교실 몇호예요", "교실 몇호임",
            
            # 등하교 관련
            "등하교", "등교", "하교", "등교 시간", "하교 시간",
            "등교 방법", "하교 방법", "등교 경로", "하교 경로",
            "등교 버스", "하교 버스", "등교 차량", "하교 차량",
            "등교 정차대", "하교 정차대", "정차대", "정차대 위치",
            "등교 시간이 언제야", "하교 시간이 언제야", "등교 방법 알려줘",
            
            # 맥락적 등하교 표현
            "등교 언제야", "등교 언제예요", "등교 언제임",
            "하교 언제야", "하교 언제예요", "하교 언제임",
            "등교 몇시야", "등교 몇시예요", "등교 몇시임",
            "하교 몇시야", "하교 몇시예요", "하교 몇시임",
            "등교 어떻게 가", "등교 어떻게 가요", "등교 어떻게 가냐",
            "하교 어떻게 가", "하교 어떻게 가요", "하교 어떻게 가냐",
            "등교 어디서 타", "등교 어디서 타요", "등교 어디서 타냐",
            "하교 어디서 타", "하교 어디서 타요", "하교 어디서 타냐",
            "등교 버스 언제 와", "등교 버스 언제 와요", "등교 버스 언제 오냐",
            "하교 버스 언제 와", "하교 버스 언제 와요", "하교 버스 언제 오냐",
            "등교 차량 어디서", "등교 차량 어디서야", "등교 차량 어디서예요",
            "하교 차량 어디서", "하교 차량 어디서야", "하교 차량 어디서예요",
            "정차대 어디야", "정차대 어디예요", "정차대 어디임",
            "정차대 어떻게 가", "정차대 어떻게 가요", "정차대 어떻게 가냐",
            "정차대 몇시까지", "정차대 몇시까지야", "정차대 몇시까지예요",
            
            # 학교시설 관련
            "학교시설", "체육관", "운동장", "도서관", "도서실",
            "보건실", "급식실", "컴퓨터실", "음악실", "미술실",
            "체육관 사용", "운동장 사용", "도서관 사용", "도서실 사용",
            "학교시설 이용", "학교시설 사용", "체육관 임대", "운동장 임대",
            
            # 맥락적 학교시설 표현
            "체육관 어디야", "체육관 어디예요", "체육관 어디임",
            "운동장 어디야", "운동장 어디예요", "운동장 어디임",
            "도서관 어디야", "도서관 어디예요", "도서관 어디임",
            "도서실 어디야", "도서실 어디예요", "도서실 어디임",
            "보건실 어디야", "보건실 어디예요", "보건실 어디임",
            "급식실 어디야", "급식실 어디예요", "급식실 어디임",
            "컴퓨터실 어디야", "컴퓨터실 어디예요", "컴퓨터실 어디임",
            "음악실 어디야", "음악실 어디예요", "음악실 어디임",
            "미술실 어디야", "미술실 어디예요", "미술실 어디임",
            "체육관 사용하려면", "체육관 사용하려면 어떻게 해", "체육관 사용하려면 어떻게 해요",
            "운동장 사용하려면", "운동장 사용하려면 어떻게 해", "운동장 사용하려면 어떻게 해요",
            "도서관 사용하려면", "도서관 사용하려면 어떻게 해", "도서관 사용하려면 어떻게 해요",
            "도서실 사용하려면", "도서실 사용하려면 어떻게 해", "도서실 사용하려면 어떻게 해요",
            "체육관 임대하려면", "체육관 임대하려면 어떻게 해", "체육관 임대하려면 어떻게 해요",
            "운동장 임대하려면", "운동장 임대하려면 어떻게 해", "운동장 임대하려면 어떻게 해요",
            "체육관 언제 사용할 수 있어", "체육관 언제 사용할 수 있어요", "체육관 언제 사용할 수 있냐",
            "운동장 언제 사용할 수 있어", "운동장 언제 사용할 수 있어요", "운동장 언제 사용할 수 있냐",
            "도서관 언제 사용할 수 있어", "도서관 언제 사용할 수 있어요", "도서관 언제 사용할 수 있냐",
            "도서실 언제 사용할 수 있어", "도서실 언제 사용할 수 있어요", "도서실 언제 사용할 수 있냐",
            
            # 유치원 관련
            "유치원", "유치원 등원", "유치원 하원", "유치원 시간",
            "유치원 운영시간", "유치원 등원시간", "유치원 하원시간",
            "유치원 방과후", "유치원 특성화", "유치원 프로그램",
            "유치원 등원이 언제야", "유치원 하원이 언제야", "유치원 시간 알려줘",
            
            # 맥락적 유치원 표현
            "유치원 언제야", "유치원 언제예요", "유치원 언제임",
            "유치원 등원 언제야", "유치원 등원 언제예요", "유치원 등원 언제임",
            "유치원 하원 언제야", "유치원 하원 언제예요", "유치원 하원 언제임",
            "유치원 몇시야", "유치원 몇시예요", "유치원 몇시임",
            "유치원 등원 몇시야", "유치원 등원 몇시예요", "유치원 등원 몇시임",
            "유치원 하원 몇시야", "유치원 하원 몇시예요", "유치원 하원 몇시임",
            "유치원 어떻게 가", "유치원 어떻게 가요", "유치원 어떻게 가냐",
            "유치원 어디야", "유치원 어디예요", "유치원 어디임",
            "유치원 뭐해", "유치원 뭐해요", "유치원 뭐하냐",
            "유치원 누구랑", "유치원 누구랑이야", "유치원 누구랑이예요",
            "유치원 얼마야", "유치원 얼마예요", "유치원 얼마냐",
            "유치원 신청했어", "유치원 신청했어요", "유치원 신청했냐",
            "유치원 등록했어", "유치원 등록했어요", "유치원 등록했냐",
            
            # 일반적인 질문
            "안녕", "안녕하세요", "안녕하세요!", "안녕!", "안녕~",
            "도움", "도움말", "도움말이 필요해", "도움이 필요해",
            "감사", "감사합니다", "고마워", "고마워요", "고맙습니다",
            "뭐해", "뭐하고 있어", "뭐해?", "뭐하고 있어?",
            "잘 있어", "잘 있어요", "잘 있어~", "잘 있어요~"
        ]
        
        for pattern in additional_patterns:
            if pattern not in self.all_questions:
                self.all_questions.add(pattern)
                variations = self.generate_all_variations(pattern)
                self.question_variations[pattern] = {
                    'original': pattern,
                    'variations': variations,
                    'answer': '자동 생성된 질문',
                    'category': '추가 패턴'
                }
        
        print(f"✅ 총 {len(self.all_questions)}개의 원본 질문 추출 완료")
        print(f"✅ 변형 포함 총 {sum(len(v['variations']) for v in self.question_variations.values())}개의 질문 생성")
    
    def create_excel_file(self):
        """엑셀 파일 생성"""
        print("📊 엑셀 파일 생성 중...")
        
        # 데이터 준비
        excel_data = []
        
        for original, data in self.question_variations.items():
            for i, variation in enumerate(data['variations']):
                excel_data.append({
                    '원본 질문': original,
                    '변형 번호': i + 1,
                    '질문': variation,
                    '답변': data['answer'],
                    '카테고리': data['category'],
                    '변형 타입': '원본' if i == 0 else '변형'
                })
        
        # DataFrame 생성
        df = pd.DataFrame(excel_data)
        
        # 엑셀 파일로 저장
        filename = '와석초_챗봇_모든질문_변형포함.xlsx'
        
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # 전체 데이터
            df.to_excel(writer, sheet_name='전체질문', index=False)
            
            # 카테고리별 분리
            for category in df['카테고리'].unique():
                if pd.notna(category):
                    category_df = df[df['카테고리'] == category]
                    sheet_name = category[:31] if len(category) > 31 else category  # 엑셀 시트명 제한
                    category_df.to_excel(writer, sheet_name=sheet_name, index=False)
            
            # 원본 질문만
            original_df = df[df['변형 타입'] == '원본']
            original_df.to_excel(writer, sheet_name='원본질문만', index=False)
            
            # 통계 정보
            stats_data = []
            for category in df['카테고리'].unique():
                if pd.notna(category):
                    category_count = len(df[df['카테고리'] == category])
                    original_count = len(df[(df['카테고리'] == category) & (df['변형 타입'] == '원본')])
                    variation_count = category_count - original_count
                    stats_data.append({
                        '카테고리': category,
                        '원본 질문 수': original_count,
                        '변형 질문 수': variation_count,
                        '총 질문 수': category_count
                    })
            
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='통계', index=False)
        
        print(f"✅ 엑셀 파일 생성 완료: {filename}")
        print(f"📈 총 {len(df)}개의 질문 (원본: {len(df[df['변형 타입'] == '원본'])}, 변형: {len(df[df['변형 타입'] == '변형'])})")
        
        return filename

def main():
    extractor = QuestionExtractor()
    extractor.extract_all_questions()
    filename = extractor.create_excel_file()
    
    print(f"\n🎉 완료! 엑셀 파일: {filename}")
    print("📋 시트 구성:")
    print("  - 전체질문: 모든 질문과 변형")
    print("  - 원본질문만: 원본 질문만")
    print("  - 통계: 카테고리별 통계")
    print("  - 각 카테고리별 시트")

if __name__ == "__main__":
    main() 